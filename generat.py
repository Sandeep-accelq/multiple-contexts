#!/usr/bin/env python3
"""
Android Project Generator with GitHub Actions CI/CD
Generates a complete Android counter app with automated signed APK building
"""

import os
import base64
import textwrap

def create_directory_structure():
    """Create the complete Android project directory structure"""
    directories = [
        "app/src/main/java/com/yourname/counterapp",
        "app/src/main/res/drawable",
        "app/src/main/res/layout",
        "app/src/main/res/values",
        "app/src/main/res/values-night",
        "app/src/main/res/mipmap-hdpi",
        "app/src/main/res/mipmap-mdpi",
        "app/src/main/res/mipmap-xhdpi",
        "app/src/main/res/mipmap-xxhdpi",
        "app/src/main/res/mipmap-xxxhdpi",
        "app/src/main/res/xml",
        "app/src/androidTest/java/com/yourname/counterapp",
        "app/src/test/java/com/yourname/counterapp",
        "gradle/wrapper",
        ".github/workflows"
    ]
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
    print("✓ Directory structure created")

def create_gradle_wrapper():
    """Create Gradle wrapper files"""
    
    # gradle-wrapper.properties
    wrapper_properties = """distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\\://services.gradle.org/distributions/gradle-8.1-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
"""
    
    with open("gradle/wrapper/gradle-wrapper.properties", "w") as f:
        f.write(wrapper_properties)
    
    # gradlew (Unix shell script)
    gradlew_content = '''#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Gradle template within the Gradle
#       installation directory, and is expected to link to Wrapper JARs and
#       other files installed by the Gradle Wrapper. It is not suitable for
#       production use without modification.
#

DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
APP_NAME="Gradle"
APP_BASE_NAME=${0##*/}

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_HOME=$( cd "${APP_HOME:-./}" && pwd -P ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

exec "$JAVACMD" "$@"
'''
    
    with open("gradlew", "w") as f:
        f.write(gradlew_content)
    
    # Make gradlew executable
    os.chmod("gradlew", 0o755)
    
    # gradlew.bat (Windows batch script)
    gradlew_bat = '''@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega
'''
    
    with open("gradlew.bat", "w") as f:
        f.write(gradlew_bat)
    
    print("✓ Gradle wrapper files created")

def create_root_gradle_files():
    """Create root-level Gradle configuration files"""
    
    # settings.gradle
    settings_gradle = """pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.name = "CounterApp"
include ':app'
"""
    
    with open("settings.gradle", "w") as f:
        f.write(settings_gradle)
    
    # build.gradle (project level)
    build_gradle = """plugins {
    id 'com.android.application' version '8.1.0' apply false
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
"""
    
    with open("build.gradle", "w") as f:
        f.write(build_gradle)
    
    # gradle.properties
    gradle_properties = """org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
android.useAndroidX=true
android.enableJetifier=true
android.nonTransitiveRClass=false
"""
    
    with open("gradle.properties", "w") as f:
        f.write(gradle_properties)
    
    # local.properties (auto-detect Android SDK)
    local_properties = """# Auto-generated local.properties
# This file should *NOT* be checked into Version Control Systems,
# as it contains information specific to your local configuration.
#
# Location of the Android SDK. This is only used by Gradle.
# For customization when using a Version Control System, please read the
# header note.
#sdk.dir=/path/to/android/sdk
"""
    
    with open("local.properties", "w") as f:
        f.write(local_properties)
    
    print("✓ Root Gradle files created")

def create_app_gradle():
    """Create app-level build.gradle"""
    
    app_build_gradle = """plugins {
    id 'com.android.application'
}

android {
    namespace 'com.yourname.counterapp'
    compileSdk 34

    defaultConfig {
        applicationId "com.yourname.counterapp"
        minSdk 21
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file(project.hasProperty('KEYSTORE_FILE') ? KEYSTORE_FILE : 'dummy-keystore')
            storePassword project.hasProperty('KEYSTORE_PASSWORD') ? KEYSTORE_PASSWORD : 'dummy'
            keyAlias project.hasProperty('KEY_ALIAS') ? KEY_ALIAS : 'dummy'
            keyPassword project.hasProperty('KEY_PASSWORD') ? KEY_PASSWORD : 'dummy'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}
"""
    
    with open("app/build.gradle", "w") as f:
        f.write(app_build_gradle)
    
    # proguard-rules.pro
    proguard_rules = """# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile
"""
    
    with open("app/proguard-rules.pro", "w") as f:
        f.write(proguard_rules)
    
    print("✓ App Gradle files created")

def create_android_manifest():
    """Create AndroidManifest.xml"""
    
    manifest = """<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:theme="@style/Theme.CounterApp"
        tools:targetApi="31">
        
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:theme="@style/Theme.CounterApp">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>
"""
    
    with open("app/src/main/AndroidManifest.xml", "w") as f:
        f.write(manifest)
    
    print("✓ AndroidManifest.xml created")

def create_main_activity():
    """Create MainActivity.java"""
    
    main_activity = """package com.yourname.counterapp;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    
    private TextView counterTextView;
    private Button incrementButton;
    private Button decrementButton;
    private Button resetButton;
    private int counter = 0;
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        // Initialize views
        counterTextView = findViewById(R.id.counterTextView);
        incrementButton = findViewById(R.id.incrementButton);
        decrementButton = findViewById(R.id.decrementButton);
        resetButton = findViewById(R.id.resetButton);
        
        // Set initial counter value
        updateCounterDisplay();
        
        // Set click listeners
        incrementButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                counter++;
                updateCounterDisplay();
            }
        });
        
        decrementButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                counter--;
                updateCounterDisplay();
            }
        });
        
        resetButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                counter = 0;
                updateCounterDisplay();
            }
        });
    }
    
    private void updateCounterDisplay() {
        counterTextView.setText(String.valueOf(counter));
    }
}
"""
    
    with open("app/src/main/java/com/yourname/counterapp/MainActivity.java", "w") as f:
        f.write(main_activity)
    
    print("✓ MainActivity.java created")

def create_layout_files():
    """Create XML layout files"""
    
    # activity_main.xml
    activity_main = """<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout 
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/background_color"
    tools:context=".MainActivity">

    <TextView
        android:id="@+id/titleTextView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="64dp"
        android:text="@string/app_name"
        android:textSize="32sp"
        android:textStyle="bold"
        android:textColor="@color/primary_color"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <TextView
        android:id="@+id/counterTextView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="64dp"
        android:text="0"
        android:textSize="96sp"
        android:textStyle="bold"
        android:textColor="@color/secondary_color"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/titleTextView" />

    <LinearLayout
        android:id="@+id/buttonLayout"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="64dp"
        android:orientation="horizontal"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/counterTextView">

        <com.google.android.material.button.MaterialButton
            android:id="@+id/decrementButton"
            android:layout_width="80dp"
            android:layout_height="80dp"
            android:layout_marginEnd="16dp"
            android:text="@string/decrement_button"
            android:textSize="24sp"
            android:textStyle="bold"
            app:cornerRadius="40dp"
            style="@style/Widget.Material3.Button.Icon" />

        <com.google.android.material.button.MaterialButton
            android:id="@+id/resetButton"
            android:layout_width="100dp"
            android:layout_height="80dp"
            android:layout_marginHorizontal="16dp"
            android:text="@string/reset_button"
            android:textSize="16sp"
            android:textStyle="bold"
            app:cornerRadius="40dp"
            style="@style/Widget.Material3.Button.OutlinedButton" />

        <com.google.android.material.button.MaterialButton
            android:id="@+id/incrementButton"
            android:layout_width="80dp"
            android:layout_height="80dp"
            android:layout_marginStart="16dp"
            android:text="@string/increment_button"
            android:textSize="24sp"
            android:textStyle="bold"
            app:cornerRadius="40dp"
            style="@style/Widget.Material3.Button.Icon" />

    </LinearLayout>

    <TextView
        android:id="@+id/instructionTextView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="48dp"
        android:text="@string/instruction_text"
        android:textSize="16sp"
        android:textColor="@color/text_secondary"
        android:gravity="center"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/buttonLayout" />

</androidx.constraintlayout.widget.ConstraintLayout>
"""
    
    with open("app/src/main/res/layout/activity_main.xml", "w") as f:
        f.write(activity_main)
    
    print("✓ Layout files created")

def create_resource_files():
    """Create resource XML files"""
    
    # strings.xml
    strings = """<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">Counter App</string>
    <string name="increment_button">+</string>
    <string name="decrement_button">-</string>
    <string name="reset_button">RESET</string>
    <string name="instruction_text">Tap + to increment, - to decrement, or RESET to start over</string>
</resources>
"""
    
    with open("app/src/main/res/values/strings.xml", "w") as f:
        f.write(strings)
    
    # colors.xml
    colors = """<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="primary_color">#6200EE</color>
    <color name="primary_variant">#3700B3</color>
    <color name="secondary_color">#03DAC6</color>
    <color name="secondary_variant">#018786</color>
    <color name="background_color">#FFFFFF</color>
    <color name="surface_color">#FFFFFF</color>
    <color name="error_color">#B00020</color>
    <color name="text_primary">#000000</color>
    <color name="text_secondary">#666666</color>
    
    <!-- Dark theme colors -->
    <color name="primary_color_dark">#BB86FC</color>
    <color name="primary_variant_dark">#3700B3</color>
    <color name="secondary_color_dark">#03DAC6</color>
    <color name="background_color_dark">#121212</color>
    <color name="surface_color_dark">#121212</color>
    <color name="text_primary_dark">#FFFFFF</color>
    <color name="text_secondary_dark">#AAAAAA</color>
</resources>
"""
    
    with open("app/src/main/res/values/colors.xml", "w") as f:
        f.write(colors)
    
    # themes.xml
    themes = """<?xml version="1.0" encoding="utf-8"?>
<resources xmlns:tools="http://schemas.android.com/tools">
    <style name="Theme.CounterApp" parent="Theme.Material3.DayNight">
        <item name="colorPrimary">@color/primary_color</item>
        <item name="colorPrimaryVariant">@color/primary_variant</item>
        <item name="colorSecondary">@color/secondary_color</item>
        <item name="colorSecondaryVariant">@color/secondary_variant</item>
        <item name="android:colorBackground">@color/background_color</item>
        <item name="colorSurface">@color/surface_color</item>
        <item name="colorError">@color/error_color</item>
        <item name="android:textColorPrimary">@color/text_primary</item>
        <item name="android:textColorSecondary">@color/text_secondary</item>
    </style>
</resources>
"""
    
    with open("app/src/main/res/values/themes.xml", "w") as f:
        f.write(themes)
    
    # themes.xml (night)
    themes_night = """<?xml version="1.0" encoding="utf-8"?>
<resources xmlns:tools="http://schemas.android.com/tools">
    <style name="Theme.CounterApp" parent="Theme.Material3.DayNight">
        <item name="colorPrimary">@color/primary_color_dark</item>
        <item name="colorPrimaryVariant">@color/primary_variant_dark</item>
        <item name="colorSecondary">@color/secondary_color_dark</item>
        <item name="android:colorBackground">@color/background_color_dark</item>
        <item name="colorSurface">@color/surface_color_dark</item>
        <item name="android:textColorPrimary">@color/text_primary_dark</item>
        <item name="android:textColorSecondary">@color/text_secondary_dark</item>
    </style>
</resources>
"""
    
    with open("app/src/main/res/values-night/themes.xml", "w") as f:
        f.write(themes_night)
    
    print("✓ Resource files created")

def create_xml_config_files():
    """Create XML configuration files for Android 12+ compatibility"""
    
    # data_extraction_rules.xml
    data_extraction = """<?xml version="1.0" encoding="utf-8"?>
<data-extraction-rules>
    <cloud-backup>
        <include domain="sharedpref" path="."/>
        <exclude domain="sharedpref" path="device.xml"/>
    </cloud-backup>
    <device-transfer>
        <include domain="sharedpref" path="."/>
        <exclude domain="sharedpref" path="device.xml"/>
    </device-transfer>
</data-extraction-rules>
"""
    
    with open("app/src/main/res/xml/data_extraction_rules.xml", "w") as f:
        f.write(data_extraction)
    
    # backup_rules.xml
    backup_rules = """<?xml version="1.0" encoding="utf-8"?>
<full-backup-content>
    <include domain="sharedpref" path="."/>
    <exclude domain="sharedpref" path="device.xml"/>
</full-backup-content>
"""
    
    with open("app/src/main/res/xml/backup_rules.xml", "w") as f:
        f.write(backup_rules)
    
    print("✓ XML configuration files created")

def create_vector_drawable():
    """Create vector drawable icon"""
    
    ic_launcher = """<vector android:height="24dp" android:tint="#6200EE"
    android:viewportHeight="24" android:viewportWidth="24"
    android:width="24dp" xmlns:android="http://schemas.android.com/apk/res/android">
    <path android:fillColor="@android:color/white" android:pathData="M19,13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
</vector>
"""
    
    with open("app/src/main/res/drawable/ic_launcher_foreground.xml", "w") as f:
        f.write(ic_launcher)
    
    # Create simple launcher icons for all densities (using same content)
    launcher_icon = """<vector android:height="24dp" android:tint="#6200EE"
    android:viewportHeight="24" android:viewportWidth="24"
    android:width="24dp" xmlns:android="http://schemas.android.com/apk/res/android">
    <path android:fillColor="@android:color/white" android:pathData="M19,13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
</vector>
"""
    
    # Create placeholder icon files for different densities
    densities = ["hdpi", "mdpi", "xhdpi", "xxhdpi", "xxxhdpi"]
    for density in densities:
        icon_path = f"app/src/main/res/mipmap-{density}/ic_launcher.xml"
        with open(icon_path, "w") as f:
            f.write(launcher_icon)
    
    print("✓ Vector drawable icons created")

def create_test_files():
    """Create test files"""
    
    # Unit test
    unit_test = """package com.yourname.counterapp;

import org.junit.Test;
import static org.junit.Assert.*;

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
 */
public class ExampleUnitTest {
    @Test
    public void addition_isCorrect() {
        assertEquals(4, 2 + 2);
    }
}
"""
    
    with open("app/src/test/java/com/yourname/counterapp/ExampleUnitTest.java", "w") as f:
        f.write(unit_test)
    
    # Instrumented test
    instrumented_test = """package com.yourname.counterapp;

import android.content.Context;
import androidx.test.platform.app.InstrumentationRegistry;
import androidx.test.ext.junit.runners.AndroidJUnit4;
import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;

/**
 * Instrumented test, which will execute on an Android device.
 *
 * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
 */
@RunWith(AndroidJUnit4.class)
public class ExampleInstrumentedTest {
    @Test
    public void useAppContext() {
        // Context of the app under test.
        Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();
        assertEquals("com.yourname.counterapp", appContext.getPackageName());
    }
}
"""
    
    with open("app/src/androidTest/java/com/yourname/counterapp/ExampleInstrumentedTest.java", "w") as f:
        f.write(instrumented_test)
    
    print("✓ Test files created")

def create_github_actions():
    """Create GitHub Actions workflow"""
    
    workflow = """name: Build Signed APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Decode Keystore
      env:
        ENCODED_STRING: ${{ secrets.KEYSTORE_BASE64 }}
      run: |
        echo $ENCODED_STRING | base64 -di > keystore.jks
        
    - name: Build Release APK
      env:
        KEYSTORE_FILE: ${{ github.workspace }}/keystore.jks
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        ./gradlew assembleRelease
        
    - name: Verify APK
      run: |
        ls -la app/build/outputs/apk/release/
        
    - name: Upload APK as artifact
      uses: actions/upload-artifact@v3
      with:
        name: signed-apk
        path: app/build/outputs/apk/release/app-release.apk
        
    - name: Upload APK to releases (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: app/build/outputs/apk/release/app-release.apk
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
"""
    
    with open(".github/workflows/build.yml", "w") as f:
        f.write(workflow)
    
    print("✓ GitHub Actions workflow created")

def create_gitignore():
    """Create .gitignore file"""
    
    gitignore = """# Built application files
*.apk
*.aar

# Files for the ART/Dalvik VM
*.dex

# Java class files
*.class

# Generated files
bin/
gen/
out/
#  Uncomment the following line in case you need and you don't have the release build type files in your app
# release/

# Gradle files
.gradle/
build/

# Local configuration file (sdk path, etc)
local.properties

# Proguard folder generated by Eclipse
proguard/

# Log Files
*.log

# Android Studio Navigation editor temp files
.navigation/

# Android Studio captures folder
captures/

# IntelliJ
*.iml
.idea/workspace.xml
.idea/tasks.xml
.idea/gradle.xml
.idea/assetWizardSettings.xml
.idea/dictionaries
.idea/libraries
# Android Studio 3 in .gitignore file.
.idea/caches
.idea/modules.xml
# Comment next line if keeping position of elements in Navigation Editor is relevant for you
.idea/navEditor.xml

# Keystore files
# Uncomment the following lines if you do not want to check your keystore files in.
*.jks
*.keystore

# External native build folder generated in Android Studio 2.2 and later
.externalNativeBuild
.cxx/

# Google Services (e.g. APIs or Firebase)
# google-services.json

# Freeline
freeline.py
freeline/
freeline_project_description.json

# fastlane
fastlane/report.xml
fastlane/Preview.html
fastlane/screenshots
fastlane/test_output
fastlane/readme.md

# Version control
vcs.xml

# lint
lint/intermediates/
lint/generated/
lint/outputs/
lint/tmp/
# lint/reports/
"""
    
    with open(".gitignore", "w") as f:
        f.write(gitignore)
    
    print("✓ .gitignore created")

def create_readme():
    """Create README.md file"""
    
    readme = """# Counter App - Android

A simple, elegant counter application built with Java and Material Design components. Features automatic signed APK generation via GitHub Actions.

## Features

- ✅ Increment/Decrement/Reset counter functionality
- ✅ Material Design 3 theming with day/night mode support
- ✅ Responsive layout with ConstraintLayout
- ✅ Automatic signed APK generation via GitHub Actions
- ✅ No local Android Studio installation required
- ✅ Production-ready build configuration

## Quick Setup

### 1. Repository Setup
1. Push this project to your GitHub repository
2. Enable GitHub Actions in your repository settings

### 2. Configure Signing Secrets
You need to add the following secrets to your GitHub repository:

1. Go to your repository → Settings → Secrets and variables → Actions
2. Add these repository secrets:

   - **KEYSTORE_BASE64**: Base64 encoded keystore file
   - **KEYSTORE_PASSWORD**: Password for your keystore
   - **KEY_ALIAS**: Alias name for your signing key
   - **KEY_PASSWORD**: Password for your signing key

### 3. Generate Keystore (if you don't have one)
\\`\\`\\`bash
keytool -genkey -v -keystore my-release-key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias my-key-alias
\\`\\`\\`

### 4. Convert Keystore to Base64
\\`\\`\\`bash
base64 my-release-key.jks | tr -d '\\\\n'
\\`\\`\\`

### 5. Build APK
- Push to main/master branch or manually trigger the workflow
- Download the signed APK from Actions artifacts
- APK location: `app/build/outputs/apk/release/app-release.apk`

## Project Structure

\\`\\`\\`
CounterApp/
├── .github/workflows/build.yml    # GitHub Actions CI/CD
├── app/
│   ├── src/main/
│   │   ├── java/com/yourname/counterapp/
│   │   │   └── MainActivity.java
│   │   ├── res/
│   │   │   ├── layout/activity_main.xml
│   │   │   ├── values/colors.xml
│   │   │   ├── values/strings.xml
│   │   │   ├── values/themes.xml
│   │   │   └── values-night/themes.xml
│   │   └── AndroidManifest.xml
│   └── build.gradle
├── gradle/wrapper/
├── build.gradle
├── settings.gradle
└── README.md
\\`\\`\\`

## Build Configuration

- **Target SDK**: API 34 (Android 14)
- **Minimum SDK**: API 21 (Android 5.0)
- **Build Tools**: Android Gradle Plugin 8.1.0
- **Language**: Java 8
- **UI Framework**: AndroidX + Material Design 3

## Dependencies

- AndroidX AppCompat 1.6.1
- Material Design Components 1.9.0
- ConstraintLayout 2.1.4
- JUnit 4.13.2 (testing)

## Customization

### Change Package Name
1. Update `namespace` and `applicationId` in `app/build.gradle`
2. Update package declaration in `MainActivity.java`
3. Move Java files to new package directory structure

### Update App Name
1. Modify `app_name` string in `app/src/main/res/values/strings.xml`
2. Update `rootProject.name` in `settings.gradle`

### Modify Colors/Theme
- Edit `app/src/main/res/values/colors.xml`
- Update `app/src/main/res/values/themes.xml`

## GitHub Actions Workflow

The included workflow automatically:
- Sets up JDK 17 and Android SDK
- Caches Gradle dependencies for faster builds
- Decodes keystore from GitHub Secrets
- Builds signed release APK
- Uploads APK as downloadable artifact
- Creates release with APK (on git tags)

## Local Development

If you want to develop locally:
1. Install Android Studio
2. Open the project
3. Create `local.properties` with your SDK path:
   \\`\\`\\`
   sdk.dir=/path/to/your/android/sdk
   \\`\\`\\`
4. Build: `./gradlew assembleDebug`

## Troubleshooting

### Common Issues:
- **Keystore not found**: Ensure KEYSTORE_BASE64 secret is correctly encoded
- **Build fails**: Check that all required secrets are set
- **Package conflicts**: Use unique package name in build.gradle

### Support
- Check GitHub Actions logs for detailed error messages
- Ensure all repository secrets are properly configured
- Verify keystore passwords match your actual keystore

## License

This project is open source and available under the [MIT License](LICENSE).
"""
    
    with open("README.md", "w") as f:
        f.write(readme)
    
    print("✓ README.md created")

def main():
    """Main function to generate the complete Android project"""
    
    print("🚀 Generating Android Counter App with GitHub Actions CI/CD...")
    print("=" * 60)
    
    try:
        # Create project structure
        create_directory_structure()
        
        # Create Gradle files
        create_gradle_wrapper()
        create_root_gradle_files()
        create_app_gradle()
        
        # Create Android files
        create_android_manifest()
        create_main_activity()
        create_layout_files()
        create_resource_files()
        create_xml_config_files()
        create_vector_drawable()
        
        # Create test files
        create_test_files()
        
        # Create CI/CD and documentation
        create_github_actions()
        create_gitignore()
        create_readme()
        
        print("=" * 60)
        print("✅ SUCCESS! Android project generated successfully!")
        print("\n📋 Next Steps:")
        print("1. Push this project to your GitHub repository")
        print("2. Add the required secrets to your GitHub repository:")
        print("   - KEYSTORE_BASE64 (base64 encoded keystore)")
        print("   - KEYSTORE_PASSWORD")
        print("   - KEY_ALIAS")
        print("   - KEY_PASSWORD")
        print("3. Push to main branch to trigger automatic APK build")
        print("4. Download signed APK from GitHub Actions artifacts")
        print("\n📖 Check README.md for detailed setup instructions")
        print("🔗 GitHub Actions will build your APK automatically!")
        
    except Exception as e:
        print(f"❌ Error generating project: {str(e)}")
        return False
    
    return True

if __name__ == "__main__":
    main()